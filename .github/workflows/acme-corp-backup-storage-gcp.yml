name: Britive-GitHub Federated Access for GCP via OpenID Connect

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'  # Runs daily at 08:00 UTC

permissions:
  id-token: write
  contents: read

jobs:
  federated-gcp-access:
    runs-on: ubuntu-latest

    env:
      GCS_BUCKET_NAME: acme-corp-backup-storage
      GCP_PROJECT_ID: 810261868576
      BRITIVE_TENANT: demo.britive-app.com
      BRITIVE_PROFILE_NAME: GCP - CIS/GCP - CIS/ACME-Storage-Bucket
      FED_PROVIDER: github-britive

    steps:
      - name: Install pybritive and gcloud CLI
        run: |
          pip install pybritive --quiet

      - name: Checkout GCP access from Britive and authenticate
        run: |
          echo "Checking out GCP login command from Britive..."
          echo "Using tenant: $BRITIVE_TENANT"
          echo "Using profile: $BRITIVE_PROFILE_NAME"
          echo "Using provider: $FED_PROVIDER"
          
          # First, let's check if we can connect to Britive
          echo "Testing Britive connection..."
          pybritive --version
          
          # Try to list available profiles to verify access
          echo "Listing available profiles..."
          if pybritive profile list -t $BRITIVE_TENANT -P $FED_PROVIDER; then
            echo "Profiles listed successfully"
          else
            echo "Failed to list profiles - trying without federation provider..."
            pybritive profile list -t $BRITIVE_TENANT || echo "Profile listing failed completely"
          fi
          
          # Let's also try to get help on the checkout command to see available options
          echo "Getting checkout command help..."
          pybritive checkout --help || echo "Could not get checkout help"
          
          # Now attempt the checkout with error handling
          echo "Attempting GCP checkout..."
          set +x
          
          # Try the original profile name first
          echo "Trying profile name: '$BRITIVE_PROFILE_NAME'"
          if CHECKOUT_RESULT=$(pybritive checkout -t $BRITIVE_TENANT -m gcloudauth "$BRITIVE_PROFILE_NAME" -P $FED_PROVIDER 2>&1); then
            echo "Checkout successful with original profile name!"
          else
            echo "Original profile name failed: $CHECKOUT_RESULT"
            
            # Try without the federation provider
            echo "Trying without federation provider..."
            if CHECKOUT_RESULT=$(pybritive checkout -t $BRITIVE_TENANT -m gcloudauth "$BRITIVE_PROFILE_NAME" 2>&1); then
              echo "Checkout successful without federation provider!"
            else
              echo "Still failed: $CHECKOUT_RESULT"
              
              # Try with just the last part of the profile name
              SIMPLE_PROFILE="ACME-Storage-Bucket"
              echo "Trying simplified profile name: '$SIMPLE_PROFILE'"
              if CHECKOUT_RESULT=$(pybritive checkout -t $BRITIVE_TENANT -m gcloudauth "$SIMPLE_PROFILE" -P $FED_PROVIDER 2>&1); then
                echo "Checkout successful with simplified profile name!"
              else
                echo "All checkout attempts failed. Last error: $CHECKOUT_RESULT"
                exit 1
              fi
            fi
          fi
          
          # If we got here, one of the attempts succeeded
          if echo "$CHECKOUT_RESULT" | grep -q '^gcloud auth activate-service-account'; then
            echo "Checkout successful, extracting gcloud auth command..."
            echo "$CHECKOUT_RESULT" | grep '^gcloud auth activate-service-account' | head -1 > /tmp/gcloud_cmd.sh
            if [ -s /tmp/gcloud_cmd.sh ]; then
              echo "Executing gcloud authentication..."
              bash /tmp/gcloud_cmd.sh
            else
              echo "No gcloud auth command found in checkout result"
              echo "Full checkout result:"
              echo "$CHECKOUT_RESULT"
              exit 1
            fi
          else
            echo "Britive checkout failed with error:"
            echo "$CHECKOUT_RESULT"
            exit 1
          fi
          set -x

      - name: Confirm GCP Access (safe output)
        run: |
          echo "Verifying GCP access..."
          gcloud config list account --format="value(core.account)"
          echo "Setting project ID..."
          gcloud config set project $GCP_PROJECT_ID

      - name: GCS Bucket Listing
        run: |
          echo "Retrying bucket listing..."
          for i in {1..5}; do
            echo "Attempt $i: Listing bucket contents..."
            if gsutil ls gs://$GCS_BUCKET_NAME/; then
              echo "Bucket listing succeeded."
              break
            else
              echo "Bucket listing failed. Retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Create Daily Backup File in GCS
        run: |
          BACKUP_DATE=$(date +%Y-%m-%d)
          BACKUP_FILENAME="Backup-${BACKUP_DATE}.bak"
          echo "Creating backup file: $BACKUP_FILENAME"
          echo "Daily Backup $BACKUP_DATE" > /tmp/$BACKUP_FILENAME
          gsutil cp -n /tmp/$BACKUP_FILENAME gs://$GCS_BUCKET_NAME/$BACKUP_FILENAME
          echo "Successfully created backup file: gs://$GCS_BUCKET_NAME/$BACKUP_FILENAME"
          echo "Current files in backup bucket:"
          gsutil ls gs://$GCS_BUCKET_NAME/
